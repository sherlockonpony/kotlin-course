package com.sherlockonpony.amkkc.lesson12

//Напиши валидную сигнатура метода - номер задачи будет 0.
//Задача 0e1 - Напишите сигнатуру функции, которая не принимает аргументов и не возвращает значения.
// 0e2 Напишите сигнатуру функции, которая принимает два целых числа и возвращает их сумму.
// 0e3 Напишите сигнатуру функции, которая принимает строку и ничего не возвращает.
// 0e4 Напишите сигнатуру функции, которая принимает список целых чисел и возвращает среднее значение типа Double.
// 0e5 Напишите сигнатуру функции, которая принимает nullable строку и возвращает её длину в виде nullable целого числа.
// 0e6 Напишите сигнатуру функции, которая не принимает аргументов и возвращает nullable вещественное число.
// 0e7 Напишите сигнатуру функции, которая принимает nullable список целых чисел и не возвращает значения.
// 0e8 Напишите сигнатуру функции, которая принимает целое число и возвращает nullable строку.
// 0e9 Напишите сигнатуру функции, которая не принимает аргументов и возвращает список nullable строк.
// 0e10 Напишите сигнатуру функции, которая принимает nullable строку и nullable целое число и возвращает nullable булево значение.
//
fun main () {

fun oe1 (){}
fun oe2 (a: Int, b: Int): Int = a + b
fun oe3 (string: String) = Unit
fun oe4 (numbers: List<Int>): Double {
    return numbers.average() //выпадающая подсказка от Идеи-читерство? удалить?
}
fun oe6 (): Int?{
    return null
}
//fun oe7

//Напиши рабочий код для следующих задач:
//Задача 1:
//Напишите функцию multiplyByTwo, которая принимает целое число и возвращает его, умноженное на 2.

fun multiplyByTwo (number: Int): Int {
    var number = 10 //
    return number * 2
}
    // println(multiplyByTwo) - почему не печатает????

//Задача 2:
//Создайте функцию isEven, которая принимает целое число и возвращает true, если число чётное, и false в противном случае.

fun isEven (number: Int): Boolean {
    return number % 2 == 0
}

//Задача 3:
//Напишите функцию printNumbersUntil, которая принимает целое число n и выводит на экран числа от 1 до n.
// Если число n меньше 1, функция должна прекратить выполнение с помощью return без вывода сообщений.

fun printNumbersUntil(n: Int) {
        if (n < 1) {
            return
        }
        for (number in 1..n) {
            println(number)
        }
    }
//Задача 4:
//Создайте функцию findFirstNegative, которая принимает список целых чисел и возвращает первое отрицательное число в списке.
// Если отрицательных чисел нет, функция должна вернуть null.

fun findFirstNegative(listing: List<Int>): Int? {
        for (number in listing) {
            if (number < 0) {
                return number
            }
        }
        return null
    }

//Задача 5:
//Напишите функцию processList, которая принимает список строк. Функция должна проходить по списку и выводить каждую строку. Если встречается null значение, функция должна прекратить выполнение с помощью return без возврата значения.
//Я РАДИ ЭТОГО ОТПУСК ВОЗЬМУ И ПЕРЕСМОТРЮ ЗАНОВО ВСЕ УРОКИ И СМОГУ САМ ПОНЯТЬ И СДЕЛАТЬ!!!!!
//Сделай рефакторинг функции, через определение вспомогательных приватных функций. Требуется избавиться от дублирования кода и трудно воспринимаемых фрагментов.
//Сначала сделай запуск функции и посмотри на результат её работы. Сделай запуск после рефакторинга и проверь, чтобы результат работы был аналогичным.
}