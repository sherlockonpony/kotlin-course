package com.sherlockonpony.amkkc.lesson14

//Для решения каждой задачи постарайтесь использовать наиболее подходящий метод, не повторяясь с решением других задач.
//1. Дан словарь с именем и временем выполнения каждого автоматизированного теста в секундах. Определите среднее время выполнения теста.
fun main () {
println("Пример 1")
    val exc1 = mapOf<String,Int>()
    println(exc1.values.average())

//2. Имеется словарь с метаданными автоматизированных тестов,
// где ключи — это имена тестовых методов а значения - строка с метаданными. Выведите список всех тестовых методов.
    println("Пример 2")
    val exc2 = mapOf<String, String>()
    println(exc2.keys.toList())

//3. В изменяемый словарь с данными о прохождении тестов добавьте новый тест и его результат.
    println("Пример 3")
    val exc3 = mutableMapOf<String, String> ()
    println(exc3)
    exc3 [""] = ""

//4. Посчитайте количество успешных тестов в словаре с результатами.
    println("Пример 4")
    val exc4 = mapOf<String,Int>()
    println (exc4.count {it.value < 49}) //условно "успех" это от 50 и больше

//5. Удалите из изменяемого словаря с баг-трекингом запись о баге, который был исправлен.
    println("Пример 5")
    val exc5 = mutableMapOf<String, String>()
    exc5.remove("")
//6. Для словаря с результатами тестирования веб-страниц (ключ — URL страницы, значение — статус ответа),
// выведите сообщение о странице и статусе её проверки.
    println("Пример 6")
    val exc6 = mapOf<String, String>()
    exc6.forEach { println("${it.key} is ${it.value}") }
//7. Найдите в словаре с названием и временем ответа сервисов только те, время ответа которых превышает заданный порог.
    println("Пример 7")
    val exc7 = mapOf<String, Int>()
    println(exc7.filterValues { it > 9})
//8. В словаре хранятся результаты тестирования API (ключ — endpoint, значение — статус ответа в строке).
// Для указанного endpoint найдите статус ответа, если endpoint отсутствует, предположите, что он не был протестирован.

//9. Из словаря, содержащего конфигурации тестового окружения (ключ — название параметра конфигурации),
// получите значение для "browserType". Ответ не может быть null.

//10. Создайте копию неизменяемого словаря с данными о версиях тестируемого ПО, чтобы добавить новую версию.

//11. Используя словарь с настройками тестирования для различных мобильных устройств (ключ — модель устройства),
// получите настройки для конкретной модели или верните настройки по умолчанию.

//12. Проверьте, содержит ли словарь с ошибками тестирования (код и описание) определенный код ошибки.
    println("Пример 12")
    val exc12 = mapOf<Int, String>()
    println(exc12.containsKey(0))

//13. Дан неизменяемый словарь, где ключи — это идентификаторы тестовых сценариев в формате "TestID_Version",
// а значения — статусы выполнения этих тестов ("Passed", "Failed", "Skipped"). Отфильтруйте словарь,
// оставив только те сценарии, идентификаторы которых соответствуют определённой версии тестов.
    println("Пример 13")
    val exc13 = mapOf<String, String>()
    val filterExc13 = exc13.filterKeys { it == "" }

//14. У вас есть словарь, где ключи — это названия функциональных модулей приложения,
// а значения — результаты их тестирования. Проверьте, есть ли модули с неудачным тестированием.
    println("Пример 14")
    val exc14 = mapOf<String, String>()
    println({exc14.toString() == "Error" }) //.values только для чисел

//15. Добавьте в изменяемый словарь с настройками тестовой среды настройки из другого словаря.
//16. Объедините два неизменяемых словаря с данными о багах.
//17. Очистите изменяемый словарь с временными данными о последнем прогоне автоматизированных тестов.
//18. Исключите из отчета по автоматизированному тестированию те случаи, где тесты были пропущены (имеют статус “skipped”)
//19. Удалите из словаря с конфигурациями тестирования набор устаревших конфигураций.
//20. Создайте отчет о тестировании, преобразовав словарь с результатами тестирования (ключ — идентификатор теста, значение — результат) в список строк формата "Test ID: результат".
}

//21. Преобразуйте изменяемый словарь с результатами последнего тестирования в неизменяемый для архивации.
//22. Преобразуйте словарь, содержащий ID теста и данные о времени выполнения тестов, заменив идентификаторы тестов на их названия (название можно получить вызвав фейковый метод, например getNameById(id: String))
//23. Для словаря с оценками производительности различных версий приложения увеличьте каждую оценку на 10%, чтобы учесть новые условия тестирования.
//24. Проверьте, пуст ли словарь с ошибками компиляции тестов.
//25. Убедитесь, что словарь с результатами нагрузочного тестирования не пуст.
//26. Проверьте, прошли ли успешно все автоматизированные тесты в словаре с результатами.
//27. Определите, содержит ли словарь с результатами тестирования хотя бы один тест с ошибкой.
//28. Отфильтруйте словарь с результатами тестирования сервисов, оставив только те тесты, которые не прошли успешно и содержат в названии “optional”.

//P.S. капец заболел, голова мутная. обязательно пересмотрю записи и попробую разобраться. тем более итак отпуск брать, предыдущие уроки уже не понял