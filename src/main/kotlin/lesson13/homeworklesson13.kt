package com.sherlockonpony.amkkc.lesson13

//1. Предварительные задачи на использование методов.
//Подбери подходящий для задачи метод
//Задачи на приведение коллекций к значению
//isNotEmpty; //getOrElse; //joinToString; //firstOrNull
//size; //isEmpty; //minOrNull; //contains
//sum; //average; //maxOrNull
//---------------------------------
//sorted; //groupBy; //distinct; //take
//takeLast; //filter; //filterNot; //map
//associate; //sortedDescending; //forEach; //filterNotNull

fun printAll(vararg args: Any?) {
for (i in args) {
    println (i)
}
}
fun main() {
    val collection = listOf(22, 23, 24, 17)
    val strings = listOf("de", "bc", "cd", "cd")
    println("Задание 1")
    printAll(
        collection.size > 5, // Проверить, что размер коллекции больше 5 элементов.
        collection.isEmpty(), //Проверить, что коллекция пустая
        collection.isNotEmpty(), //Проверить, что коллекция не пустая
        collection.getOrElse(2) { 5 }, //Взять элемент по индексу или создать значение если индекса не существует
        collection.joinToString(" "), //Собрать коллекцию в строку
        collection.sum(), //Посчитать сумму всех значений
        collection.average(), //Посчитать среднее
        collection.max(), //Взять максимальное число
        collection.min(), //Взять минимальное число
        collection.firstOrNull(), //Взять первое число или null
        collection.contains(3), //Проверить что коллекция содержит элемент
        //-----------------------
        collection.filter { it in 18..30 }, // Отфильтровать коллекцию по диапазону 18-30
        collection.filterNot { it % 2 == 0 && it % 3 == 0 }, //Выбрать числа, не делящиеся на 2 и 3 одновременно
        collection.filterNotNull(), //Очистить текстовую коллекцию от null элементов
        collection.map { "$it".length }, //Преобразовать текстовую коллекцию в коллекцию длин слов
        strings.associate { it to it.reversed() }, //текстовую коллекцию в мапу, где ключи - слова, а значения - перевёрнутые слова
        strings.sorted(), //Отсортировать список в алфавитном порядке
        strings.sortedDescending(), //Отсортировать список по убыванию
        collection.forEach { println(it * it) }, //Распечатать квадраты элементов списка
        strings.groupBy { it.firstOrNull() }, //Группировать список по первой букве слов
        strings.distinct(), //Очистить список от дублей
        collection.take(3), //Взять первые 3 элемента списка
        collection.takeLast(3) //Взять последние 3 элемента списка
    )
//    Написать метод, который принимает коллекцию чисел и возвращает строку с текущим состоянием коллекции используя конструкцию when
//    Если коллекция пустая - “Пусто”
//    Если количество элементов меньше пяти - “Короткая”
//    Если коллекция начинается с 0 - “Стартовая”
//    Если сумма всех чисел больше 10000 - “Массивная”
//    Если среднее значение равно 10 - “Сбалансированная”
//    Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//    Если максимальное число меньше -10 - “Отрицательная”
//    Если минимальное число больше 1000 - “Положительная”
//    Если содержит одновременно числа 3 и 14 - “Пи***тая”
//    Иначе - “Уникальная”
//    Вызвать метод с данными, подходящими под каждую из веток
    fun characteristicListNumbers(numList: List<Int>): String {
        return when {
            numList.isEmpty() -> "Пусто"
            numList.size < 5 -> "Короткая"
            numList.getOrNull(0) == 0 -> "Стартовая"
            numList.sum() > 10000 -> "Массивная"
            numList.min() > 1000 -> "Положительная"
            numList.average() == 10.0 -> "Сбалансированная"
            numList.joinToString("").length == 20 -> "Клейкая"
            numList.max() <= -10 -> "Отрицательная"
            numList.contains(3) && numList.contains(14) -> "Пи***тая"
            else -> "Уникальная"
        }
        println("Задание 2")
        val empty = listOf<Int>()
        println(characteristicListNumbers(empty))
        val short = listOf<Int>(1, 2, 3)
        println(characteristicListNumbers(short))
        val start = listOf<Int>(0, 1, 2, 3, 4, 5)
        println(characteristicListNumbers(start))
        val massive = listOf<Int>(10, 100, 1000, 10000, 100000)
        println(characteristicListNumbers(massive))
        val positive = listOf<Int>(1001, 1002, 1003, 1024, 1016)
        println(characteristicListNumbers(positive))
        val balanced = listOf<Int>(10, 10, 10, 10, 10, 10)
        println(characteristicListNumbers(balanced))
        val sticky = List(20) { 1 }
        println(characteristicListNumbers(sticky))
        val negative = listOf<Int>(-100, -99, -10, -50, -60)
        println(characteristicListNumbers(negative))
        val PI = listOf<Int>(1, 2, 3, 10, 14)
        println(characteristicListNumbers(PI))
        val unique = listOf<Int>(1, 1, 1, 1, 1)
        println(characteristicListNumbers(unique))
    }
//    Начальные значения: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//    Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
    println("Задание 3")
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    println(
        grades.filter { it >= 60 }
            .sorted()
            .take(3)
    )
//Задание 4: Создание каталога по первой букве.
//Начальные значения: val list = listOf(
//"Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра",
// "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник",
// "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван",
// "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
// "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик",
// "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка"
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве.
    println("Задание 4")
    val list = listOf(
        "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик",
        "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод",
        "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка",
        "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир",
        "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка")
    println(list.map { it
        .lowercase() }
        .groupBy { it[0] }
    )
//Задание 5: Подсчёт средней длины слов в списке.
//Начальные значения из задачи 3.
//Цель: Перевести все слова в количество букв, подсчитать среднее значение.
// Вывести форматированный текст с двумя знаками после запятой.

    println("Задание 5")
    println("Средняя длина: %.2f".format((list.map { it.length }).average()))

//    Задание 6: Категоризация чисел.
//    Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//    Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
//
//    Задание 7: Поиск первого подходящего элемента
//    Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60)
//    Цель: Найти первый возраст в списке, который соответствует условию (больше 18), преобразовать его к строке, или вернуть сообщение "Подходящий возраст не найден".
}

